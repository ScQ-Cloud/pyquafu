
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "mainleft+-left*/right^rightUMINUSASSIGN BARRIER CHANNEL CREG FLOAT GATE ID IF INCLUDE INT MATCHES MEASURE NONE OPAQUE OPENQASM PI QREG RESET STRING UNIT\n        main : program\n        \n        program : statement\n        \n        program : program statement\n        \n        statement : OPENQASM FLOAT ';'\n                    | OPENQASM FLOAT error\n                    | OPENQASM error\n        \n        statement : qop ';'\n                | qop error\n                | qif ';'\n                | qif error\n        \n        statement : ';'\n        \n        qif : IF '(' primary MATCHES INT ')' qop \n            | IF '(' primary MATCHES INT error\n            | IF '(' primary MATCHES error\n            | IF '(' primary error\n            | IF '(' error\n            | IF error\n        \n        qop : id primary_list\n            | id '(' ')' primary_list \n            | id '(' expression_list ')' primary_list\n        \n        qop : id '(' ')' error \n            | id '(' error\n            | id '(' expression_list ')' error\n            | id '(' expression_list error\n        \n        qop : MEASURE primary ASSIGN primary\n        \n        qop : MEASURE primary ASSIGN error\n            | MEASURE primary error\n            | MEASURE error\n        \n        qop : BARRIER primary_list\n        \n        qop : BARRIER error\n        \n        qop : RESET primary\n        \n        qop : RESET error\n        \n        qarg_list : id\n        \n        qarg_list : qarg_list ',' id\n        \n        carg_list : id\n        \n        carg_list : carg_list ',' id\n        \n        statement : GATE id gate_scope qarg_list gate_body \n        \n        statement : GATE id gate_scope '(' ')' qarg_list gate_body \n        \n        statement : GATE id gate_scope '(' carg_list ')' qarg_list gate_body \n        \n        gate_scope : \n        \n        gate_body : '{' gate_scope '}'\n                    | '{' gate_scope error\n        \n        gate_body : '{' gop_list gate_scope '}'\n                    | '{' gop_list gate_scope error\n        \n        gop_list : gop\n        \n        gop_list : gop_list gop\n        \n        gop : id id_list ';'\n            | id id_list error\n            | id '(' ')' id_list ';'\n            | id '(' ')' id_list error\n            | id '(' ')' error\n            | id '(' error\n        \n        gop : id '(' expression_list ')' id_list ';'\n            | id '(' expression_list ')' id_list error\n            | id '(' expression_list ')' error\n            | id '(' expression_list error\n        \n        gop : BARRIER id_list ';'\n            | BARRIER id_list error\n            | BARRIER error\n        \n        statement : qdecl ';'\n                    | cdecl ';'\n                    | qdecl error\n                    | cdecl error\n        \n        qdecl : QREG indexed_id\n                | QREG error\n        \n        cdecl : CREG indexed_id\n                | CREG error\n        \n        id : ID\n            | error\n        \n        indexed_id : id '[' INT ']'\n                    | id '[' INT error\n                    | id '[' error\n        \n        primary : id\n                | indexed_id\n        \n        primary_list : primary\n                     | primary_list ',' primary\n        \n        id_list : id\n        \n        id_list : id_list ',' id\n        \n        unary : INT\n        \n        unary : FLOAT\n        \n        unary : PI\n        \n        unary : id\n        \n        expression : expression '*' expression\n                    | expression '/' expression\n                    | expression '+' expression\n                    | expression '-' expression\n                    | expression '^' expression\n        \n        expression : - expression %prec UMINUS\n        \n        expression : unary\n        \n        expression : '(' expression ')'\n        \n        expression : id '(' expression ')'\n        \n        expression_list : expression\n        \n        expression_list : expression_list ',' expression\n        \n        ignore : STRING\n        "
    
_lr_action_items = {'OPENQASM':([0,2,3,5,20,22,23,24,25,26,33,34,35,36,50,51,93,125,126,134,138,139,148,],[4,4,-2,-11,-3,-6,-7,-8,-9,-10,-60,-62,-61,-63,-4,-5,-37,-41,-42,-38,-43,-44,-39,]),';':([0,2,3,5,6,7,8,11,12,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,38,39,40,41,42,44,45,46,48,49,50,51,59,67,69,74,75,78,79,81,89,90,92,93,99,100,103,104,112,124,125,126,129,130,132,133,134,137,138,139,148,149,150,151,156,157,],[5,5,-2,-11,-69,23,25,33,35,-68,-3,50,-6,-7,-8,-9,-10,-73,-18,-75,-74,-60,-62,-61,-63,-28,-29,-30,-31,-32,-17,-64,-65,-66,-67,-4,-5,-22,-27,-16,-72,-76,-19,-21,-24,-25,-26,-15,-37,-70,-71,-20,-23,-14,-13,-41,-42,-77,140,146,-69,-38,-12,-43,-44,-39,-78,154,-69,158,-69,]),'GATE':([0,2,3,5,20,22,23,24,25,26,33,34,35,36,50,51,93,125,126,134,138,139,148,],[9,9,-2,-11,-3,-6,-7,-8,-9,-10,-60,-62,-61,-63,-4,-5,-37,-41,-42,-38,-43,-44,-39,]),'MEASURE':([0,2,3,5,20,22,23,24,25,26,33,34,35,36,50,51,93,123,125,126,134,138,139,148,],[13,13,-2,-11,-3,-6,-7,-8,-9,-10,-60,-62,-61,-63,-4,-5,-37,13,-41,-42,-38,-43,-44,-39,]),'BARRIER':([0,2,3,5,20,22,23,24,25,26,33,34,35,36,50,51,93,95,115,116,123,125,126,128,133,134,138,139,140,141,144,146,147,148,151,153,154,155,157,158,159,],[14,14,-2,-11,-3,-6,-7,-8,-9,-10,-60,-62,-61,-63,-4,-5,-37,118,118,-45,14,-41,-42,-46,-59,-38,-43,-44,-47,-48,-52,-57,-58,-39,-51,-56,-49,-50,-55,-53,-54,]),'RESET':([0,2,3,5,20,22,23,24,25,26,33,34,35,36,50,51,93,123,125,126,134,138,139,148,],[15,15,-2,-11,-3,-6,-7,-8,-9,-10,-60,-62,-61,-63,-4,-5,-37,15,-41,-42,-38,-43,-44,-39,]),'IF':([0,2,3,5,20,22,23,24,25,26,33,34,35,36,50,51,93,125,126,134,138,139,148,],[16,16,-2,-11,-3,-6,-7,-8,-9,-10,-60,-62,-61,-63,-4,-5,-37,-41,-42,-38,-43,-44,-39,]),'QREG':([0,2,3,5,20,22,23,24,25,26,33,34,35,36,50,51,93,125,126,134,138,139,148,],[17,17,-2,-11,-3,-6,-7,-8,-9,-10,-60,-62,-61,-63,-4,-5,-37,-41,-42,-38,-43,-44,-39,]),'CREG':([0,2,3,5,20,22,23,24,25,26,33,34,35,36,50,51,93,125,126,134,138,139,148,],[18,18,-2,-11,-3,-6,-7,-8,-9,-10,-60,-62,-61,-63,-4,-5,-37,-41,-42,-38,-43,-44,-39,]),'ID':([0,2,3,5,6,9,10,13,14,15,17,18,19,20,22,23,24,25,26,27,30,33,34,35,36,43,50,51,52,54,56,57,61,66,72,76,80,82,83,84,85,86,87,93,94,95,97,115,116,117,118,120,121,123,125,126,128,131,133,134,138,139,140,141,142,143,144,146,147,148,151,152,153,154,155,157,158,159,],[19,19,-2,-11,-69,19,19,19,19,19,19,19,-68,-3,-6,-7,-8,-9,-10,-40,19,-60,-62,-61,-63,19,-4,-5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-37,19,19,19,19,-45,19,19,19,19,19,-41,-42,-46,19,-59,-38,-43,-44,-47,-48,19,19,-52,-57,-58,-39,-51,19,-56,-49,-50,-55,-53,-54,]),'error':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,100,102,103,104,105,106,107,108,109,110,111,112,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,],[6,6,-2,22,-11,-69,24,26,6,6,34,36,38,40,42,44,46,49,-68,-3,51,-6,-7,-8,-9,-10,-40,-73,-18,59,-75,-74,-60,-62,-61,-63,67,-28,-29,-30,-31,-32,69,-17,-64,-65,-66,-67,-4,-5,6,74,6,-82,6,79,81,-22,-92,6,-89,-79,-80,-81,90,-27,92,-16,6,100,-72,-76,6,-19,-21,104,-24,6,6,6,6,6,6,-88,-25,-26,112,-15,-37,6,6,6,-70,-71,-90,-20,-23,-93,-83,-84,-85,-86,-87,124,-14,126,6,-45,6,133,6,6,-91,6,-13,-41,-42,139,-46,-77,141,144,147,-59,-38,-12,-43,-44,-47,-48,6,151,-52,153,-57,-58,-39,-78,155,-51,157,-56,-49,-50,159,-55,-53,-54,]),'$end':([1,2,3,5,20,22,23,24,25,26,33,34,35,36,50,51,93,125,126,134,138,139,148,],[0,-1,-2,-11,-3,-6,-7,-8,-9,-10,-60,-62,-61,-63,-4,-5,-37,-41,-42,-38,-43,-44,-39,]),'FLOAT':([4,30,56,61,76,82,83,84,85,86,87,131,],[21,64,64,64,64,64,64,64,64,64,64,64,]),'(':([6,10,16,19,27,30,52,55,56,59,61,76,82,83,84,85,86,87,117,131,144,],[-69,30,43,-68,-40,56,72,76,56,-69,56,56,56,56,56,56,56,56,131,56,-69,]),'[':([6,19,28,38,40,42,46,47,49,69,79,90,104,],[-69,-68,53,-69,-69,-69,-69,53,-69,-69,-69,-69,-69,]),',':([6,19,28,29,31,32,39,40,55,58,59,60,62,63,64,65,70,71,74,75,78,79,88,96,98,99,100,102,103,104,105,106,107,108,109,110,113,119,122,129,130,132,133,135,136,144,145,149,150,151,156,157,],[-69,-68,-73,54,-75,-74,54,-69,-82,82,-69,-92,-89,-79,-80,-81,-33,94,-72,-76,54,-69,-88,-35,121,-70,-71,-90,54,-69,-93,-83,-84,-85,-86,-87,-34,94,-91,-77,142,142,-69,94,-36,-69,82,-78,142,-69,142,-69,]),'{':([6,19,70,71,113,119,135,],[-69,-68,-33,95,-34,95,95,]),')':([6,19,30,55,58,59,60,62,63,64,65,72,77,88,96,98,101,102,105,106,107,108,109,110,111,122,131,136,144,145,],[-69,-68,57,-82,80,-69,-92,-89,-79,-80,-81,97,102,-88,-35,120,122,-90,-93,-83,-84,-85,-86,-87,123,-91,143,-36,-69,152,]),'*':([6,19,55,59,60,62,63,64,65,77,88,101,102,105,106,107,108,109,110,122,144,],[-69,-68,-82,-69,83,-89,-79,-80,-81,83,-88,83,-90,83,-83,-84,83,83,-87,-91,-69,]),'/':([6,19,55,59,60,62,63,64,65,77,88,101,102,105,106,107,108,109,110,122,144,],[-69,-68,-82,-69,84,-89,-79,-80,-81,84,-88,84,-90,84,-83,-84,84,84,-87,-91,-69,]),'+':([6,19,55,59,60,62,63,64,65,77,88,101,102,105,106,107,108,109,110,122,144,],[-69,-68,-82,-69,85,-89,-79,-80,-81,85,-88,85,-90,85,-83,-84,-85,-86,-87,-91,-69,]),'-':([6,19,30,55,56,59,60,61,62,63,64,65,76,77,82,83,84,85,86,87,88,101,102,105,106,107,108,109,110,122,131,144,],[-69,-68,61,-82,61,-69,86,61,-89,-79,-80,-81,61,86,61,61,61,61,61,61,-88,86,-90,86,-83,-84,-85,-86,-87,-91,61,-69,]),'^':([6,19,55,59,60,62,63,64,65,77,88,101,102,105,106,107,108,109,110,122,144,],[-69,-68,-82,-69,87,-89,-79,-80,-81,87,-88,87,-90,87,87,87,87,87,87,-91,-69,]),'ASSIGN':([19,28,32,37,38,74,99,100,],[-68,-73,-74,66,-69,-72,-70,-71,]),'MATCHES':([19,28,32,68,69,74,99,100,],[-68,-73,-74,91,-69,-72,-70,-71,]),'INT':([30,53,56,61,76,82,83,84,85,86,87,91,131,],[63,73,63,63,63,63,63,63,63,63,63,111,63,]),'PI':([30,56,61,76,82,83,84,85,86,87,131,],[65,65,65,65,65,65,65,65,65,65,65,]),']':([73,],[99,]),'}':([95,114,115,116,127,128,133,140,141,144,146,147,151,153,154,155,157,158,159,],[-40,125,-40,-45,138,-46,-59,-47,-48,-52,-57,-58,-51,-56,-49,-50,-55,-53,-54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'program':([0,],[2,]),'statement':([0,2,],[3,20,]),'qop':([0,2,123,],[7,7,137,]),'qif':([0,2,],[8,8,]),'id':([0,2,9,10,13,14,15,17,18,30,43,52,54,56,57,61,66,72,76,80,82,83,84,85,86,87,94,95,97,115,117,118,120,121,123,131,142,143,152,],[10,10,27,28,28,28,28,47,47,55,28,70,28,55,28,55,28,96,55,28,55,55,55,55,55,55,113,117,70,117,129,129,70,136,10,55,149,129,129,]),'qdecl':([0,2,],[11,11,]),'cdecl':([0,2,],[12,12,]),'primary_list':([10,14,57,80,],[29,39,78,103,]),'primary':([10,13,14,15,43,54,57,66,80,],[31,37,31,41,68,75,31,89,31,]),'indexed_id':([10,13,14,15,17,18,43,54,57,66,80,],[32,32,32,32,45,48,32,32,32,32,32,]),'gate_scope':([27,95,115,],[52,114,127,]),'expression_list':([30,131,],[58,145,]),'expression':([30,56,61,76,82,83,84,85,86,87,131,],[60,77,88,101,105,106,107,108,109,110,60,]),'unary':([30,56,61,76,82,83,84,85,86,87,131,],[62,62,62,62,62,62,62,62,62,62,62,]),'qarg_list':([52,97,120,],[71,119,135,]),'gate_body':([71,119,135,],[93,134,148,]),'carg_list':([72,],[98,]),'gop_list':([95,],[115,]),'gop':([95,115,],[116,128,]),'id_list':([117,118,143,152,],[130,132,150,156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> program','main',1,'p_main','qfasm_parser.py',404),
  ('program -> statement','program',1,'p_program','qfasm_parser.py',413),
  ('program -> program statement','program',2,'p_program_list','qfasm_parser.py',420),
  ('statement -> OPENQASM FLOAT ;','statement',3,'p_statement_openqasm','qfasm_parser.py',433),
  ('statement -> OPENQASM FLOAT error','statement',3,'p_statement_openqasm','qfasm_parser.py',434),
  ('statement -> OPENQASM error','statement',2,'p_statement_openqasm','qfasm_parser.py',435),
  ('statement -> qop ;','statement',2,'p_statement_qop','qfasm_parser.py',448),
  ('statement -> qop error','statement',2,'p_statement_qop','qfasm_parser.py',449),
  ('statement -> qif ;','statement',2,'p_statement_qop','qfasm_parser.py',450),
  ('statement -> qif error','statement',2,'p_statement_qop','qfasm_parser.py',451),
  ('statement -> ;','statement',1,'p_statement_empty','qfasm_parser.py',459),
  ('qif -> IF ( primary MATCHES INT ) qop','qif',7,'p_statement_qif','qfasm_parser.py',465),
  ('qif -> IF ( primary MATCHES INT error','qif',6,'p_statement_qif','qfasm_parser.py',466),
  ('qif -> IF ( primary MATCHES error','qif',5,'p_statement_qif','qfasm_parser.py',467),
  ('qif -> IF ( primary error','qif',4,'p_statement_qif','qfasm_parser.py',468),
  ('qif -> IF ( error','qif',3,'p_statement_qif','qfasm_parser.py',469),
  ('qif -> IF error','qif',2,'p_statement_qif','qfasm_parser.py',470),
  ('qop -> id primary_list','qop',2,'p_unitaryop','qfasm_parser.py',510),
  ('qop -> id ( ) primary_list','qop',4,'p_unitaryop','qfasm_parser.py',511),
  ('qop -> id ( expression_list ) primary_list','qop',5,'p_unitaryop','qfasm_parser.py',512),
  ('qop -> id ( ) error','qop',4,'p_unitaryop_error','qfasm_parser.py',529),
  ('qop -> id ( error','qop',3,'p_unitaryop_error','qfasm_parser.py',530),
  ('qop -> id ( expression_list ) error','qop',5,'p_unitaryop_error','qfasm_parser.py',531),
  ('qop -> id ( expression_list error','qop',4,'p_unitaryop_error','qfasm_parser.py',532),
  ('qop -> MEASURE primary ASSIGN primary','qop',4,'p_measure','qfasm_parser.py',541),
  ('qop -> MEASURE primary ASSIGN error','qop',4,'p_measure_error','qfasm_parser.py',550),
  ('qop -> MEASURE primary error','qop',3,'p_measure_error','qfasm_parser.py',551),
  ('qop -> MEASURE error','qop',2,'p_measure_error','qfasm_parser.py',552),
  ('qop -> BARRIER primary_list','qop',2,'p_barrier','qfasm_parser.py',564),
  ('qop -> BARRIER error','qop',2,'p_barrier_error','qfasm_parser.py',572),
  ('qop -> RESET primary','qop',2,'p_reset','qfasm_parser.py',579),
  ('qop -> RESET error','qop',2,'p_reset_error','qfasm_parser.py',587),
  ('qarg_list -> id','qarg_list',1,'p_gate_qarg_list_begin','qfasm_parser.py',594),
  ('qarg_list -> qarg_list , id','qarg_list',3,'p_gate_qarg_list_next','qfasm_parser.py',602),
  ('carg_list -> id','carg_list',1,'p_gate_carg_list_begin','qfasm_parser.py',612),
  ('carg_list -> carg_list , id','carg_list',3,'p_gate_carg_list_next','qfasm_parser.py',620),
  ('statement -> GATE id gate_scope qarg_list gate_body','statement',5,'p_statement_gatedecl_nolr','qfasm_parser.py',630),
  ('statement -> GATE id gate_scope ( ) qarg_list gate_body','statement',7,'p_statement_gatedecl_noargs','qfasm_parser.py',638),
  ('statement -> GATE id gate_scope ( carg_list ) qarg_list gate_body','statement',8,'p_statement_gatedecl_args','qfasm_parser.py',646),
  ('gate_scope -> <empty>','gate_scope',0,'p_gate_scope','qfasm_parser.py',654),
  ('gate_body -> { gate_scope }','gate_body',3,'p_gate_body_emptybody','qfasm_parser.py',661),
  ('gate_body -> { gate_scope error','gate_body',3,'p_gate_body_emptybody','qfasm_parser.py',662),
  ('gate_body -> { gop_list gate_scope }','gate_body',4,'p_gate_body','qfasm_parser.py',670),
  ('gate_body -> { gop_list gate_scope error','gate_body',4,'p_gate_body','qfasm_parser.py',671),
  ('gop_list -> gop','gop_list',1,'p_gop_list_begin','qfasm_parser.py',679),
  ('gop_list -> gop_list gop','gop_list',2,'p_gop_list_next','qfasm_parser.py',685),
  ('gop -> id id_list ;','gop',3,'p_gop_nocargs','qfasm_parser.py',696),
  ('gop -> id id_list error','gop',3,'p_gop_nocargs','qfasm_parser.py',697),
  ('gop -> id ( ) id_list ;','gop',5,'p_gop_nocargs','qfasm_parser.py',698),
  ('gop -> id ( ) id_list error','gop',5,'p_gop_nocargs','qfasm_parser.py',699),
  ('gop -> id ( ) error','gop',4,'p_gop_nocargs','qfasm_parser.py',700),
  ('gop -> id ( error','gop',3,'p_gop_nocargs','qfasm_parser.py',701),
  ('gop -> id ( expression_list ) id_list ;','gop',6,'p_gop_cargs','qfasm_parser.py',718),
  ('gop -> id ( expression_list ) id_list error','gop',6,'p_gop_cargs','qfasm_parser.py',719),
  ('gop -> id ( expression_list ) error','gop',5,'p_gop_cargs','qfasm_parser.py',720),
  ('gop -> id ( expression_list error','gop',4,'p_gop_cargs','qfasm_parser.py',721),
  ('gop -> BARRIER id_list ;','gop',3,'p_gop_barrier','qfasm_parser.py',737),
  ('gop -> BARRIER id_list error','gop',3,'p_gop_barrier','qfasm_parser.py',738),
  ('gop -> BARRIER error','gop',2,'p_gop_barrier','qfasm_parser.py',739),
  ('statement -> qdecl ;','statement',2,'p_statement_bitdecl','qfasm_parser.py',751),
  ('statement -> cdecl ;','statement',2,'p_statement_bitdecl','qfasm_parser.py',752),
  ('statement -> qdecl error','statement',2,'p_statement_bitdecl','qfasm_parser.py',753),
  ('statement -> cdecl error','statement',2,'p_statement_bitdecl','qfasm_parser.py',754),
  ('qdecl -> QREG indexed_id','qdecl',2,'p_qdecl','qfasm_parser.py',763),
  ('qdecl -> QREG error','qdecl',2,'p_qdecl','qfasm_parser.py',764),
  ('cdecl -> CREG indexed_id','cdecl',2,'p_cdecl','qfasm_parser.py',776),
  ('cdecl -> CREG error','cdecl',2,'p_cdecl','qfasm_parser.py',777),
  ('id -> ID','id',1,'p_id','qfasm_parser.py',790),
  ('id -> error','id',1,'p_id','qfasm_parser.py',791),
  ('indexed_id -> id [ INT ]','indexed_id',4,'p_indexed_id','qfasm_parser.py',802),
  ('indexed_id -> id [ INT error','indexed_id',4,'p_indexed_id','qfasm_parser.py',803),
  ('indexed_id -> id [ error','indexed_id',3,'p_indexed_id','qfasm_parser.py',804),
  ('primary -> id','primary',1,'p_primary','qfasm_parser.py',815),
  ('primary -> indexed_id','primary',1,'p_primary','qfasm_parser.py',816),
  ('primary_list -> primary','primary_list',1,'p_primary_list','qfasm_parser.py',824),
  ('primary_list -> primary_list , primary','primary_list',3,'p_primary_list','qfasm_parser.py',825),
  ('id_list -> id','id_list',1,'p_id_list_begin','qfasm_parser.py',837),
  ('id_list -> id_list , id','id_list',3,'p_id_list_next','qfasm_parser.py',843),
  ('unary -> INT','unary',1,'p_unary_int','qfasm_parser.py',852),
  ('unary -> FLOAT','unary',1,'p_unary_float','qfasm_parser.py',858),
  ('unary -> PI','unary',1,'p_unary_pi','qfasm_parser.py',864),
  ('unary -> id','unary',1,'p_unary_id','qfasm_parser.py',871),
  ('expression -> expression * expression','expression',3,'p_expr_binary','qfasm_parser.py',879),
  ('expression -> expression / expression','expression',3,'p_expr_binary','qfasm_parser.py',880),
  ('expression -> expression + expression','expression',3,'p_expr_binary','qfasm_parser.py',881),
  ('expression -> expression - expression','expression',3,'p_expr_binary','qfasm_parser.py',882),
  ('expression -> expression ^ expression','expression',3,'p_expr_binary','qfasm_parser.py',883),
  ('expression -> - expression','expression',2,'p_expr_uminus','qfasm_parser.py',904),
  ('expression -> unary','expression',1,'p_expr_unary','qfasm_parser.py',914),
  ('expression -> ( expression )','expression',3,'p_expr_pare','qfasm_parser.py',920),
  ('expression -> id ( expression )','expression',4,'p_expr_mathfunc','qfasm_parser.py',926),
  ('expression_list -> expression','expression_list',1,'p_exprlist_begin','qfasm_parser.py',938),
  ('expression_list -> expression_list , expression','expression_list',3,'p_exprlist_next','qfasm_parser.py',944),
  ('ignore -> STRING','ignore',1,'p_ignore','qfasm_parser.py',954),
]
